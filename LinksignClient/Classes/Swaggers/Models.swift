// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [ApiError]
            Decoders.addDecoder(clazz: [ApiError].self) { (source: AnyObject) -> [ApiError] in
                return Decoders.decode(clazz: [ApiError].self, source: source)
            }
			// Decoder for ApiError
            Decoders.addDecoder(clazz: ApiError.self) { (source: AnyObject) -> ApiError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApiError()
                instance.errCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["errCode"])
                instance.errMsg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errMsg"])
                return instance
            }
			

			// Decoder for [App]
            Decoders.addDecoder(clazz: [App].self) { (source: AnyObject) -> [App] in
                return Decoders.decode(clazz: [App].self, source: source)
            }
			// Decoder for App
            Decoders.addDecoder(clazz: App.self) { (source: AnyObject) -> App in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = App()
                instance.emailTemplateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailTemplateId"])
                instance.redirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["redirectUri"])
                instance.sealHtml5TemplateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealHtml5TemplateId"])
                instance.signatureHtml5TemplateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signatureHtml5TemplateId"])
                instance.smsTemplateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smsTemplateId"])
                return instance
            }
			

			// Decoder for [Company]
            Decoders.addDecoder(clazz: [Company].self) { (source: AnyObject) -> [Company] in
                return Decoders.decode(clazz: [Company].self, source: source)
            }
			// Decoder for Company
            Decoders.addDecoder(clazz: Company.self) { (source: AnyObject) -> Company in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Company()
                instance.emailNotice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailNotice"])
                instance.linksignUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linksignUserId"])
                instance.orgAuthorizerEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgAuthorizerEmail"])
                instance.orgAuthorizerIdcardNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgAuthorizerIdcardNumber"])
                instance.orgAuthorizerIdcardType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgAuthorizerIdcardType"])
                instance.orgAuthorizerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgAuthorizerName"])
                instance.orgAuthorizerPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgAuthorizerPhone"])
                instance.orgIdcardNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgIdcardNumber"])
                instance.orgIdcardType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgIdcardType"])
                instance.orgName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgName"])
                instance.recipientIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipientIndex"])
                instance.smsNotice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smsNotice"])
                return instance
            }
			

			// Decoder for [CustomFields]
            Decoders.addDecoder(clazz: [CustomFields].self) { (source: AnyObject) -> [CustomFields] in
                return Decoders.decode(clazz: [CustomFields].self, source: source)
            }
			// Decoder for CustomFields
            Decoders.addDecoder(clazz: CustomFields.self) { (source: AnyObject) -> CustomFields in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomFields()
                instance.imageCustomFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["imageCustomFields"])
                instance.textCustomFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["textCustomFields"])
                return instance
            }
			

			// Decoder for [Document]
            Decoders.addDecoder(clazz: [Document].self) { (source: AnyObject) -> [Document] in
                return Decoders.decode(clazz: [Document].self, source: source)
            }
			// Decoder for Document
            Decoders.addDecoder(clazz: Document.self) { (source: AnyObject) -> Document in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Document()
                instance.documentBase64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentBase64"])
                instance.documentIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentIndex"])
                instance.fileExtension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fileExtension"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for [DocumentDefinition]
            Decoders.addDecoder(clazz: [DocumentDefinition].self) { (source: AnyObject) -> [DocumentDefinition] in
                return Decoders.decode(clazz: [DocumentDefinition].self, source: source)
            }
			// Decoder for DocumentDefinition
            Decoders.addDecoder(clazz: DocumentDefinition.self) { (source: AnyObject) -> DocumentDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentDefinition()
                instance.app = Decoders.decodeOptional(clazz: App.self, source: sourceDictionary["app"])
                instance.customFields = Decoders.decodeOptional(clazz: CustomFields.self, source: sourceDictionary["customFields"])
                instance.documents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["documents"])
                instance.extraRecipients = Decoders.decodeOptional(clazz: ExtraRecipients.self, source: sourceDictionary["extraRecipients"])
                instance.idAuth = Decoders.decodeOptional(clazz: IdAuth.self, source: sourceDictionary["idAuth"])
                instance.signers = Decoders.decodeOptional(clazz: Signers.self, source: sourceDictionary["signers"])
                instance.templateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateId"])
                return instance
            }
			

			// Decoder for [DocumentStatus]
            Decoders.addDecoder(clazz: [DocumentStatus].self) { (source: AnyObject) -> [DocumentStatus] in
                return Decoders.decode(clazz: [DocumentStatus].self, source: source)
            }
			// Decoder for DocumentStatus
            Decoders.addDecoder(clazz: DocumentStatus.self) { (source: AnyObject) -> DocumentStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentStatus()
                instance.companySignerStatus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["companySignerStatus"])
                instance.personalSignerStatus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["personalSignerStatus"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [DocumentSummary]
            Decoders.addDecoder(clazz: [DocumentSummary].self) { (source: AnyObject) -> [DocumentSummary] in
                return Decoders.decode(clazz: [DocumentSummary].self, source: source)
            }
			// Decoder for DocumentSummary
            Decoders.addDecoder(clazz: DocumentSummary.self) { (source: AnyObject) -> DocumentSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DocumentSummary()
                instance.documentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentId"])
                instance.documentStatus = Decoders.decodeOptional(clazz: DocumentStatus.self, source: sourceDictionary["documentStatus"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }
			

			// Decoder for [EmailRecipient]
            Decoders.addDecoder(clazz: [EmailRecipient].self) { (source: AnyObject) -> [EmailRecipient] in
                return Decoders.decode(clazz: [EmailRecipient].self, source: source)
            }
			// Decoder for EmailRecipient
            Decoders.addDecoder(clazz: EmailRecipient.self) { (source: AnyObject) -> EmailRecipient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailRecipient()
                instance.bcc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bcc"])
                instance.emailAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailAddress"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for [ExtraRecipients]
            Decoders.addDecoder(clazz: [ExtraRecipients].self) { (source: AnyObject) -> [ExtraRecipients] in
                return Decoders.decode(clazz: [ExtraRecipients].self, source: source)
            }
			// Decoder for ExtraRecipients
            Decoders.addDecoder(clazz: ExtraRecipients.self) { (source: AnyObject) -> ExtraRecipients in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtraRecipients()
                instance.emaiRecipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emaiRecipients"])
                instance.smsRecipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["smsRecipients"])
                instance.wechatRecipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wechatRecipients"])
                return instance
            }
			

			// Decoder for [IdAuth]
            Decoders.addDecoder(clazz: [IdAuth].self) { (source: AnyObject) -> [IdAuth] in
                return Decoders.decode(clazz: [IdAuth].self, source: source)
            }
			// Decoder for IdAuth
            Decoders.addDecoder(clazz: IdAuth.self) { (source: AnyObject) -> IdAuth in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IdAuth()
                instance.bankAccountRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bankAccountRequred"])
                instance.emailRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailRequred"])
                instance.faceCompareRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["faceCompareRequred"])
                instance.idNumberRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idNumberRequred"])
                instance.smsRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smsRequred"])
                instance.wechatRequred = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wechatRequred"])
                return instance
            }
			

			// Decoder for [ImageCustomField]
            Decoders.addDecoder(clazz: [ImageCustomField].self) { (source: AnyObject) -> [ImageCustomField] in
                return Decoders.decode(clazz: [ImageCustomField].self, source: source)
            }
			// Decoder for ImageCustomField
            Decoders.addDecoder(clazz: ImageCustomField.self) { (source: AnyObject) -> ImageCustomField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageCustomField()
                instance.fieldId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldId"])
                instance.imageBase64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageBase64"])
                instance.sealId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealId"])
                instance.signatureId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signatureId"])
                return instance
            }
			

			// Decoder for [Personal]
            Decoders.addDecoder(clazz: [Personal].self) { (source: AnyObject) -> [Personal] in
                return Decoders.decode(clazz: [Personal].self, source: source)
            }
			// Decoder for Personal
            Decoders.addDecoder(clazz: Personal.self) { (source: AnyObject) -> Personal in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Personal()
                instance.emailNotice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailNotice"])
                instance.linksignUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linksignUserId"])
                instance.personEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personEmail"])
                instance.personIdcardNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personIdcardNumber"])
                instance.personIdcardType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personIdcardType"])
                instance.personName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personName"])
                instance.personOrgName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personOrgName"])
                instance.personPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personPhone"])
                instance.recipientIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipientIndex"])
                instance.smsNotice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smsNotice"])
                return instance
            }
			

			// Decoder for [Seal]
            Decoders.addDecoder(clazz: [Seal].self) { (source: AnyObject) -> [Seal] in
                return Decoders.decode(clazz: [Seal].self, source: source)
            }
			// Decoder for Seal
            Decoders.addDecoder(clazz: Seal.self) { (source: AnyObject) -> Seal in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Seal()
                instance.company = Decoders.decodeOptional(clazz: Company.self, source: sourceDictionary["Company"])
                instance.redirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["redirectUri"])
                instance.relateSignatureId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relateSignatureId"])
                return instance
            }
			

			// Decoder for [SealFile]
            Decoders.addDecoder(clazz: [SealFile].self) { (source: AnyObject) -> [SealFile] in
                return Decoders.decode(clazz: [SealFile].self, source: source)
            }
			// Decoder for SealFile
            Decoders.addDecoder(clazz: SealFile.self) { (source: AnyObject) -> SealFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SealFile()
                instance.imagePngBase64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imagePngBase64"])
                return instance
            }
			

			// Decoder for [SealSummary]
            Decoders.addDecoder(clazz: [SealSummary].self) { (source: AnyObject) -> [SealSummary] in
                return Decoders.decode(clazz: [SealSummary].self, source: source)
            }
			// Decoder for SealSummary
            Decoders.addDecoder(clazz: SealSummary.self) { (source: AnyObject) -> SealSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SealSummary()
                instance.sealFileUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealFileUri"])
                instance.sealId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealId"])
                instance.sealerRedirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealerRedirectUri"])
                return instance
            }
			

			// Decoder for [SignDateTime]
            Decoders.addDecoder(clazz: [SignDateTime].self) { (source: AnyObject) -> [SignDateTime] in
                return Decoders.decode(clazz: [SignDateTime].self, source: source)
            }
			// Decoder for SignDateTime
            Decoders.addDecoder(clazz: SignDateTime.self) { (source: AnyObject) -> SignDateTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignDateTime()
                instance.dateTimePattern = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dateTimePattern"])
                instance.documentIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentIndex"])
                instance.fontName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fontName"])
                instance.fontSize = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["fontSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["pageNumber"])
                instance.recipientIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipientIndex"])
                instance.templateDateFieldId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateDateFieldId"])
                instance.width = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["width"])
                instance.xPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["xPosition"])
                instance.yPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["yPosition"])
                return instance
            }
			

			// Decoder for [SignHere]
            Decoders.addDecoder(clazz: [SignHere].self) { (source: AnyObject) -> [SignHere] in
                return Decoders.decode(clazz: [SignHere].self, source: source)
            }
			// Decoder for SignHere
            Decoders.addDecoder(clazz: SignHere.self) { (source: AnyObject) -> SignHere in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignHere()
                instance.documentIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentIndex"])
                instance.height = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["height"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["pageNumber"])
                instance.recipientIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipientIndex"])
                instance.sealHeight = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sealHeight"])
                instance.sealId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealId"])
                instance.sealPageNumber = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sealPageNumber"])
                instance.sealWidth = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sealWidth"])
                instance.sealXPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sealXPosition"])
                instance.sealYPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sealYPosition"])
                instance.signatureId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signatureId"])
                instance.templateSealFieldId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateSealFieldId"])
                instance.templateSignatureFieldId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateSignatureFieldId"])
                instance.width = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["width"])
                instance.xPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["xPosition"])
                instance.yPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["yPosition"])
                return instance
            }
			

			// Decoder for [Signature]
            Decoders.addDecoder(clazz: [Signature].self) { (source: AnyObject) -> [Signature] in
                return Decoders.decode(clazz: [Signature].self, source: source)
            }
			// Decoder for Signature
            Decoders.addDecoder(clazz: Signature.self) { (source: AnyObject) -> Signature in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Signature()
                instance.personal = Decoders.decodeOptional(clazz: Personal.self, source: sourceDictionary["Personal"])
                instance.redirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["redirectUri"])
                instance.relateSealId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relateSealId"])
                return instance
            }
			

			// Decoder for [SignatureFile]
            Decoders.addDecoder(clazz: [SignatureFile].self) { (source: AnyObject) -> [SignatureFile] in
                return Decoders.decode(clazz: [SignatureFile].self, source: source)
            }
			// Decoder for SignatureFile
            Decoders.addDecoder(clazz: SignatureFile.self) { (source: AnyObject) -> SignatureFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignatureFile()
                instance.imagePngBase64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imagePngBase64"])
                return instance
            }
			

			// Decoder for [SignatureSummary]
            Decoders.addDecoder(clazz: [SignatureSummary].self) { (source: AnyObject) -> [SignatureSummary] in
                return Decoders.decode(clazz: [SignatureSummary].self, source: source)
            }
			// Decoder for SignatureSummary
            Decoders.addDecoder(clazz: SignatureSummary.self) { (source: AnyObject) -> SignatureSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignatureSummary()
                instance.signatureFileUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signatureFileUri"])
                instance.signatureId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signatureId"])
                instance.signerRedirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signerRedirectUri"])
                return instance
            }
			

			// Decoder for [SignerStatus]
            Decoders.addDecoder(clazz: [SignerStatus].self) { (source: AnyObject) -> [SignerStatus] in
                return Decoders.decode(clazz: [SignerStatus].self, source: source)
            }
			// Decoder for SignerStatus
            Decoders.addDecoder(clazz: SignerStatus.self) { (source: AnyObject) -> SignerStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignerStatus()
                instance.recipientIndex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipientIndex"])
                instance.signerUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signerUri"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [Signers]
            Decoders.addDecoder(clazz: [Signers].self) { (source: AnyObject) -> [Signers] in
                return Decoders.decode(clazz: [Signers].self, source: source)
            }
			// Decoder for Signers
            Decoders.addDecoder(clazz: Signers.self) { (source: AnyObject) -> Signers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Signers()
                instance.signerCompanys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["signerCompanys"])
                instance.signerPersons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["signerPersons"])
                instance.tabs = Decoders.decodeOptional(clazz: Tabs.self, source: sourceDictionary["tabs"])
                return instance
            }
			

			// Decoder for [SmsRecipient]
            Decoders.addDecoder(clazz: [SmsRecipient].self) { (source: AnyObject) -> [SmsRecipient] in
                return Decoders.decode(clazz: [SmsRecipient].self, source: source)
            }
			// Decoder for SmsRecipient
            Decoders.addDecoder(clazz: SmsRecipient.self) { (source: AnyObject) -> SmsRecipient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SmsRecipient()
                instance.mobile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for [Tabs]
            Decoders.addDecoder(clazz: [Tabs].self) { (source: AnyObject) -> [Tabs] in
                return Decoders.decode(clazz: [Tabs].self, source: source)
            }
			// Decoder for Tabs
            Decoders.addDecoder(clazz: Tabs.self) { (source: AnyObject) -> Tabs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Tabs()
                instance.dateTabs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateTabs"])
                instance.signHereTabs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["signHereTabs"])
                return instance
            }
			

			// Decoder for [TextCustomField]
            Decoders.addDecoder(clazz: [TextCustomField].self) { (source: AnyObject) -> [TextCustomField] in
                return Decoders.decode(clazz: [TextCustomField].self, source: source)
            }
			// Decoder for TextCustomField
            Decoders.addDecoder(clazz: TextCustomField.self) { (source: AnyObject) -> TextCustomField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TextCustomField()
                instance.fieldId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldId"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for [WechatRecipient]
            Decoders.addDecoder(clazz: [WechatRecipient].self) { (source: AnyObject) -> [WechatRecipient] in
                return Decoders.decode(clazz: [WechatRecipient].self, source: source)
            }
			// Decoder for WechatRecipient
            Decoders.addDecoder(clazz: WechatRecipient.self) { (source: AnyObject) -> WechatRecipient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WechatRecipient()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.openId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["openId"])
                return instance
            }
			
        }
    }
}
